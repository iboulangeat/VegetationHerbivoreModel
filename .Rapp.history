neighbor_prop <- function(neighbor) {
<-
setwd("/Users/isabelleboulangeat/Documents/PROJETS/STM-QUEBEC/STM-managed/R")
rm(list=ls())
library(deSolve)
library(rootSolve)
H = 10
R = seq(0,1, length.out = 100)
G = seq(0,1, length.out = 100)
F1 = R/H
F2 = G/H
alpha = 1
u1 = 200
u2 = 500
h1 = 1/7
h2 = 1/5
r = 5
phi = 0.2
p = 4
I1 = (alpha*u1*F1)/(1 + alpha*h1*u1*F1)
plot(I1~R1, type = "l", xlab = "Available resource (per H unit)", ylab = "Intake rate (per H unit)", xaxt = "n", yaxt = "n", main = "intake rate")
plot(I1~F1, type = "l", xlab = "Available resource (per H unit)", ylab = "Intake rate (per H unit)", xaxt = "n", yaxt = "n", main = "intake rate")
source("params.r")
setwd("/Users/isabelleboulangeat/Documents/PROJETS/HIGH2/Theorique-STM-Herbivores/_scripts_model4states")
params =  c(#
aT = 0.05,#
aB = 0.05,#
dT = 0.004,#
dB = 0.01,#
c0 = 0.7,#
k = 0.4,#
es = 0.35,#
ew = 0.25,#
m = .30,#
taus = 124* 10/358, # growing season =124 days#
tauw = (365-124)*10/358,#
gamma = 1,#
nus = 100*124/365, # nu =100, growing season =124 days#
nuw = 100*(1-124/365),#
uR = 600*100 ,#
uT =  200*100,#
uB =  200*100,#
f = .85,#
fB = 0, # proportion B browsed in summer, not used here#
p = 0.8, # preference T /B#
pR = 0.5, # preference R / B or T#
r = 10,#
hT = 0.05 ,#
hB = 0.05,#
hR = 0.05,#
uG = 800*100,#
pG = 2#
)
T = 0.2#
B = 0.5#
R = 0.3
H= 4.3*358 # biomass per km2
(production = (params["uR"]*R + params["uT"]*T))
Fs = (params["uR"]*R + params["uT"]*T)*params["f"] # = aF
Is = (params["taus"]*Rs/H) / ( nus + Fs/H)
Is = (params["taus"]*Fs/H) / ( nus + Fs/H)
Us = Is*H
Is = (params["taus"]*Fs/H) / ( params["nus"] + Fs/H)
Us = Is*H
(conso = Us)
conso/production
124* 10/358
(365-124)*10/358
rm(list = ls())#
source("model_fct.r")#
# source("marginal_eqs.r")#
#-----------------------------------------#
# test/ ajust params#
#------------------------------------------#
##
source("params.r")#
params = init.params#
###
H=5*375#
T0 = c(T=.2, R = .2, B = .2)
#______________________________________________________________________#
# model#
#------------------------------------------#
model <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # preferences seedlings temperate/boreal#
    epsilon = 0.0001#
    omega = (T+epsilon) / (B+T+2*epsilon)#
    q = p*omega / (p*omega + (1-omega)*(1-p))#
#
    # preferences seedlings/mature#
    phis_0 = (uR*R)*f / ((uR*R+uT*T)*f +uB*B*fB)#
    phiw_0 = (uR*R*(1-f)) / ((uR*R + uT*T)*(1-f) + uB*B*(1-fB))#
    phis = pR*phis_0 / (pR*phis_0+(1-pR)*(1-phis_0))#
    phiw = pR*phiw_0 / (pR*phiw_0+(1-pR)*(1-phiw_0))#
#
    if(H>1e-5) # population cannot recover if no reproduction is possible#
    {#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*Fs/H) / (nus + Fs/H)#
      if(irate_s>(Fs/H)) irate_s = Fs/H # maximum consumption#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
#
      # impacts#
      if(R>0)#
      {#
        # R intake#
        Us = phis * Gs/es#
        Uw = phiw * Gw/ew#
#
        PR = (Us+Uw)/(uR*R)#
        if(k==0) PT=0 else PT = PR*q/omega#
        if(k==1) PB=0 else PB = PR*(1-q)/(1-omega)#
        aHT = aT/(1+exp(r*(PT-hT)))#
        aHB = aB/(1+exp(r*(PB-hB)))#
        cH = c0/(1+exp(r*(PR-hR)))#
#
      }else {#
        aHT = aT#
        aHB = aB#
        cH = c0#
      }#
#
    }else {#
      aHT = a0#
      aHB = a0#
      cH = c0#
      Gs = Gw = 0#
    }#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    #herbivore model#
#
    dH =  Gs + Gw - m * H#
    return(list(c(dT, dR, dB, dH)))#
  })#
}#
#
#_________________________________________________________________#
# model vegetation with fixed herbivore#
#------------------------------------------#
modelH1 <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # preferences seedlings temperate/boreal#
    epsilon = 0.0001#
    omega = (T+epsilon) / (B+T+2*epsilon)#
    q = p*omega / (p*omega + (1-omega)*(1-p))#
#
    # preferences seedlings/mature#
    phis_0 = (uR*R)*f / ((uR*R+uT*T)*f +uB*B*fB)#
    phiw_0 = (uR*R*(1-f)) / ((uR*R + uT*T)*(1-f) + uB*B*(1-fB))#
    phis = pR*phis_0 / (pR*phis_0+(1-pR)*(1-phis_0))#
    phiw = pR*phiw_0 / (pR*phiw_0+(1-pR)*(1-phiw_0))#
#
    if(H>1e-5) # population cannot recover if no reproduction is possible#
    {#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*Fs/H) / (nus + Fs/H)#
      if(irate_s>(Fs/H)) irate_s = Fs/H#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
#
      # impacts#
      if(R>0)#
      {#
        # R intake#
        Us = phis * Gs/es#
        Uw = phiw * Gw/ew#
#
        PR = (Us+Uw)/(uR*R)#
        if(k==0) PT=0 else PT = PR*q/omega#
        if(k==1) PB=0 else PB = PR*(1-q)/(1-omega)#
        aHT = aT/(1+exp(r*(PT-hT)))#
        aHB = aB/(1+exp(r*(PB-hB)))#
        cH = c0/(1+exp(r*(PR-hR)))#
#
      }else {#
        aHT = aT#
        aHB = aB#
        cH = c0#
      }#
#
    }else {#
      aHT = a0#
      aHB = a0#
      cH = c0#
      Gs = Gw = 0#
    }#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    return(list(c(dT, dR, dB)))#
  })#
}#
#___________________________________________________________________#
# model herbivore with fixed vegetation#
#------------------------------------------#
#
modelH <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    if(H>1e-5)#
    {#
#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*Fs/H) / (nus + Fs/H)#
      if(irate_s>(Fs/H)) irate_s = Fs/H#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
    }else {#
      Gs = Gw = 0#
    }#
#
    #herbivore model#
#
    dH =  Gs + Gw - m * H#
#
    return(list(c(dH)))#
  })#
}#
#
#______________________________________________________________________#
# model vegettion only#
#------------------------------------------#
modelV <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    return(list(c(dT, dR, dB)))#
  })#
}#
#
#------------------------------------------------------------------#
# model G : add grazing possibility#
#--------------------------------------------------------------------#
modelG <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # preferences seedlings temperate/boreal#
    epsilon = 0.0001#
    omega = (T+epsilon) / (B+T+2*epsilon)#
    q = p*omega / (p*omega + (1-omega)*(1-p))#
#
    # preferences seedlings/mature#
    phis_0 = (uR*R)*f / ((uR*R+uT*T)*f +uB*B*fB)#
    phiw_0 = (uR*R*(1-f)) / ((uR*R + uT*T)*(1-f) + uB*B*(1-fB))#
    phis = pR*phis_0 / (pR*phis_0+(1-pR)*(1-phis_0))#
    phiw = pR*phiw_0 / (pR*phiw_0+(1-pR)*(1-phiw_0))#
#
    if(H>1e-5)#
    {#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      FsG = min(uG*V, pG*Fs)#
      Fs = Fs + FsG#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*(Fs+FsG)/H) / (nus + (Fs+FsG)/H)#
      if(irate_s>((Fs+FsG)/H)) irate_s = (Fs+FsG)/H#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
#
      Us = Is *H # total summer ressource used#
      UsG = (FsG*Us)/(Fs+FsG) # grazed ressource#
      Uw = Iw *H#
      # impacts#
      if(R>0)#
      {#
        # R intake#
        Is = Gs/es#
        Us = phis * Is * (1 - FsG/Fs)#
        Uw = phiw * Gw/ew#
#
        PR = (Us+Uw)/(uR*R) - (FsG*Is)/(Fs*uG*V)#
        if(k==0) PT=0 else PT = PR*q/omega#
        if(k==1) PB=0 else PB = PR*(1-q)/(1-omega)#
        aHT = aT/(1+exp(r*(PT-hT)))#
        aHB = aB/(1+exp(r*(PB-hB)))#
        cH = c0/(1+exp(r*(PR-hR)))#
#
      }else {#
        aHT = aT#
        aHB = aB#
        cH = c0#
      }#
#
    }else {#
      aHT = a0#
      aHB = a0#
      cH = c0#
      Gs = Gw = 0#
    }#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    #herbivore model#
#
    dH =  Gs + Gw - m * H#
    return(list(c(dT, dS, dB, dH)))#
  })#
}
#______________________________________________________________________#
# model#
#------------------------------------------#
model <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # preferences seedlings temperate/boreal#
    epsilon = 0.0001#
    omega = (T+epsilon) / (B+T+2*epsilon)#
    q = p*omega / (p*omega + (1-omega)*(1-p))#
#
    # preferences seedlings/mature#
    phis_0 = (uR*R)*f / ((uR*R+uT*T)*f +uB*B*fB)#
    phiw_0 = (uR*R*(1-f)) / ((uR*R + uT*T)*(1-f) + uB*B*(1-fB))#
    phis = pR*phis_0 / (pR*phis_0+(1-pR)*(1-phis_0))#
    phiw = pR*phiw_0 / (pR*phiw_0+(1-pR)*(1-phiw_0))#
#
    if(H>1e-5) # population cannot recover if no reproduction is possible#
    {#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*Fs/H) / (nus + Fs/H)#
      if(irate_s>(Fs/H)) irate_s = Fs/H # maximum consumption#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
#
      # impacts#
      if(R>0)#
      {#
        # R intake#
        Us = phis * Gs/es#
        Uw = phiw * Gw/ew#
#
        PR = (Us+Uw)/(uR*R)#
        if(k==0) PT=0 else PT = PR*q/omega#
        if(k==1) PB=0 else PB = PR*(1-q)/(1-omega)#
        aHT = aT/(1+exp(r*(PT-hT)))#
        aHB = aB/(1+exp(r*(PB-hB)))#
        cH = c0/(1+exp(r*(PR-hR)))#
#
      }else {#
        aHT = aT#
        aHB = aB#
        cH = c0#
      }#
#
    }else {#
      aHT = a0#
      aHB = a0#
      cH = c0#
      Gs = Gw = 0#
    }#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    #herbivore model#
#
    dH =  Gs + Gw - m * H#
    return(list(c(dT, dR, dB, dH)))#
  })#
}#
#
#_________________________________________________________________#
# model vegetation with fixed herbivore#
#------------------------------------------#
modelH1 <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # preferences seedlings temperate/boreal#
    epsilon = 0.0001#
    omega = (T+epsilon) / (B+T+2*epsilon)#
    q = p*omega / (p*omega + (1-omega)*(1-p))#
#
    # preferences seedlings/mature#
    phis_0 = (uR*R)*f / ((uR*R+uT*T)*f +uB*B*fB)#
    phiw_0 = (uR*R*(1-f)) / ((uR*R + uT*T)*(1-f) + uB*B*(1-fB))#
    phis = pR*phis_0 / (pR*phis_0+(1-pR)*(1-phis_0))#
    phiw = pR*phiw_0 / (pR*phiw_0+(1-pR)*(1-phiw_0))#
#
    if(H>1e-5) # population cannot recover if no reproduction is possible#
    {#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*Fs/H) / (nus + Fs/H)#
      if(irate_s>(Fs/H)) irate_s = Fs/H#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
#
      # impacts#
      if(R>0)#
      {#
        # R intake#
        Us = phis * Gs/es#
        Uw = phiw * Gw/ew#
#
        PR = (Us+Uw)/(uR*R)#
        if(k==0) PT=0 else PT = PR*q/omega#
        if(k==1) PB=0 else PB = PR*(1-q)/(1-omega)#
        aHT = aT/(1+exp(r*(PT-hT)))#
        aHB = aB/(1+exp(r*(PB-hB)))#
        cH = c0/(1+exp(r*(PR-hR)))#
#
      }else {#
        aHT = aT#
        aHB = aB#
        cH = c0#
      }#
#
    }else {#
      aHT = a0#
      aHB = a0#
      cH = c0#
      Gs = Gw = 0#
    }#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    return(list(c(dT, dR, dB)))#
  })#
}#
#___________________________________________________________________#
# model herbivore with fixed vegetation#
#------------------------------------------#
#
modelH <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    if(H>1e-5)#
    {#
#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*Fs/H) / (nus + Fs/H)#
      if(irate_s>(Fs/H)) irate_s = Fs/H#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
    }else {#
      Gs = Gw = 0#
    }#
#
    #herbivore model#
#
    dH =  Gs + Gw - m * H#
#
    return(list(c(dH)))#
  })#
}#
#
#______________________________________________________________________#
# model vegettion only#
#------------------------------------------#
modelV <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    return(list(c(dT, dR, dB)))#
  })#
}#
#
#------------------------------------------------------------------#
# model G : add grazing possibility#
#--------------------------------------------------------------------#
modelG <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # preferences seedlings temperate/boreal#
    epsilon = 0.0001#
    omega = (T+epsilon) / (B+T+2*epsilon)#
    q = p*omega / (p*omega + (1-omega)*(1-p))#
#
    # preferences seedlings/mature#
    phis_0 = (uR*R)*f / ((uR*R+uT*T)*f +uB*B*fB)#
    phiw_0 = (uR*R*(1-f)) / ((uR*R + uT*T)*(1-f) + uB*B*(1-fB))#
    phis = pR*phis_0 / (pR*phis_0+(1-pR)*(1-phis_0))#
    phiw = pR*phiw_0 / (pR*phiw_0+(1-pR)*(1-phiw_0))#
#
    if(H>1e-5)#
    {#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      FsG = min(uG*V, pG*Fs)#
      Fs = Fs + FsG#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*(Fs+FsG)/H) / (nus + (Fs+FsG)/H)#
      if(irate_s>((Fs+FsG)/H)) irate_s = (Fs+FsG)/H#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
#
      Us = Is *H # total summer ressource used#
      UsG = (FsG*Us)/(Fs+FsG) # grazed ressource#
      Uw = Iw *H#
      # impacts#
      if(R>0)#
      {#
        # R intake#
        Is = Gs/es#
        Us = phis * Is * (1 - FsG/Fs)#
        Uw = phiw * Gw/ew#
#
        PR = (Us+Uw)/(uR*R) - (FsG*Is)/(Fs*uG*V)#
        if(k==0) PT=0 else PT = PR*q/omega#
        if(k==1) PB=0 else PB = PR*(1-q)/(1-omega)#
        aHT = aT/(1+exp(r*(PT-hT)))#
        aHB = aB/(1+exp(r*(PB-hB)))#
        cH = c0/(1+exp(r*(PR-hR)))#
#
      }else {#
        aHT = aT#
        aHB = aB#
        cH = c0#
      }#
#
    }else {#
      aHT = a0#
      aHB = a0#
      cH = c0#
      Gs = Gw = 0#
    }#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    #herbivore model#
#
    dH =  Gs + Gw - m * H#
    return(list(c(dT, dS, dB, dH)))#
  })#
}
params = init.params
init.params =  c(#
aT = 0.05,#
aB = 0.05,#
dT = 0.004,#
dB = 0.01,#
c0 = 0.7,#
k = 0.4,#
es = 0.35,#
ew = 0.25,#
m = .30,#
taus = 124* 10/358, # growing season =124 days#
tauw = (365-124)*10/358,#
gamma = 1,#
nus = 100*124/365, # nu =100, growing season =124 days#
nuw = 100*(1-124/365),#
uR = 600*100 ,#
uT =  200*100,#
uB =  200*100,#
f = .85,#
fB = 0, # proportion B browsed in summer, not used here#
p = 0.8, # preference T /B#
pR = 0.5, # preference R / B or T#
r = 10,#
hT = 0.06 ,#
hB = 0.06,#
hR = 0.06,#
uG = 800*100,#
pG = 1#
)
params = init.params#
###
H=5*375#
T0 = c(T=.2, R = .2, B = .2)
library(rootSolve)
out = runsteady(func = modelV, y =T0, parms = c(params,H=H), maxsteps = 10000)
#______________________________________________________________________#
# model#
#------------------------------------------#
model <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # preferences seedlings temperate/boreal#
    epsilon = 0.0001#
    omega = (T+epsilon) / (B+T+2*epsilon)#
    q = p*omega / (p*omega + (1-omega)*(1-p))#
#
    # preferences seedlings/mature#
    phis_0 = (uR*R)*f / ((uR*R+uT*T)*f +uB*B*fB)#
    phiw_0 = (uR*R*(1-f)) / ((uR*R + uT*T)*(1-f) + uB*B*(1-fB))#
    phis = pR*phis_0 / (pR*phis_0+(1-pR)*(1-phis_0))#
    phiw = pR*phiw_0 / (pR*phiw_0+(1-pR)*(1-phiw_0))#
#
    if(H>1e-5) # population cannot recover if no reproduction is possible#
    {#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*Fs/H) / (nus + Fs/H)#
      if(irate_s>(Fs/H)) irate_s = Fs/H # maximum consumption#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
#
      # impacts#
      if(R>0)#
      {#
        # R intake#
        Us = phis * Gs/es#
        Uw = phiw * Gw/ew#
#
        PR = (Us+Uw)/(uR*R)#
        if(k==0) PT=0 else PT = PR*q/omega#
        if(k==1) PB=0 else PB = PR*(1-q)/(1-omega)#
        aHT = aT/(1+exp(r*(PT-hT)))#
        aHB = aB/(1+exp(r*(PB-hB)))#
        cH = c0/(1+exp(r*(PR-hR)))#
#
      }else {#
        aHT = aT#
        aHB = aB#
        cH = c0#
      }#
#
    }else {#
      aHT = a0#
      aHB = a0#
      cH = c0#
      Gs = Gw = 0#
    }#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    #herbivore model#
#
    dH =  Gs + Gw - m * H#
    return(list(c(dT, dR, dB, dH)))#
  })#
}#
#
#_________________________________________________________________#
# model vegetation with fixed herbivore#
#------------------------------------------#
modelH1 <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # preferences seedlings temperate/boreal#
    epsilon = 0.0001#
    omega = (T+epsilon) / (B+T+2*epsilon)#
    q = p*omega / (p*omega + (1-omega)*(1-p))#
#
    # preferences seedlings/mature#
    phis_0 = (uR*R)*f / ((uR*R+uT*T)*f +uB*B*fB)#
    phiw_0 = (uR*R*(1-f)) / ((uR*R + uT*T)*(1-f) + uB*B*(1-fB))#
    phis = pR*phis_0 / (pR*phis_0+(1-pR)*(1-phis_0))#
    phiw = pR*phiw_0 / (pR*phiw_0+(1-pR)*(1-phiw_0))#
#
    if(H>1e-5) # population cannot recover if no reproduction is possible#
    {#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*Fs/H) / (nus + Fs/H)#
      if(irate_s>(Fs/H)) irate_s = Fs/H#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
#
      # impacts#
      if(R>0)#
      {#
        # R intake#
        Us = phis * Gs/es#
        Uw = phiw * Gw/ew#
#
        PR = (Us+Uw)/(uR*R)#
        if(k==0) PT=0 else PT = PR*q/omega#
        if(k==1) PB=0 else PB = PR*(1-q)/(1-omega)#
        aHT = aT/(1+exp(r*(PT-hT)))#
        aHB = aB/(1+exp(r*(PB-hB)))#
        cH = c0/(1+exp(r*(PR-hR)))#
#
      }else {#
        aHT = aT#
        aHB = aB#
        cH = c0#
      }#
#
    }else {#
      aHT = a0#
      aHB = a0#
      cH = c0#
      Gs = Gw = 0#
    }#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    return(list(c(dT, dR, dB)))#
  })#
}#
#___________________________________________________________________#
# model herbivore with fixed vegetation#
#------------------------------------------#
#
modelH <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    if(H>1e-5)#
    {#
#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*Fs/H) / (nus + Fs/H)#
      if(irate_s>(Fs/H)) irate_s = Fs/H#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
    }else {#
      Gs = Gw = 0#
    }#
#
    #herbivore model#
#
    dH =  Gs + Gw - m * H#
#
    return(list(c(dH)))#
  })#
}#
#
#______________________________________________________________________#
# model vegettion only#
#------------------------------------------#
modelV <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # vegetation model#
    dT= aT*R*k - dT*T#
    dB= aB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aT*k + aB*(1-k))*R#
#
    return(list(c(dT, dR, dB)))#
  })#
}#
#
#------------------------------------------------------------------#
# model G : add grazing possibility#
#--------------------------------------------------------------------#
modelG <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # preferences seedlings temperate/boreal#
    epsilon = 0.0001#
    omega = (T+epsilon) / (B+T+2*epsilon)#
    q = p*omega / (p*omega + (1-omega)*(1-p))#
#
    # preferences seedlings/mature#
    phis_0 = (uR*R)*f / ((uR*R+uT*T)*f +uB*B*fB)#
    phiw_0 = (uR*R*(1-f)) / ((uR*R + uT*T)*(1-f) + uB*B*(1-fB))#
    phis = pR*phis_0 / (pR*phis_0+(1-pR)*(1-phis_0))#
    phiw = pR*phiw_0 / (pR*phiw_0+(1-pR)*(1-phiw_0))#
#
    if(H>1e-5)#
    {#
      Fs = (uR*R + uT*T)*f + uB*B*fB#
      FsG = min(uG*V, pG*Fs)#
      Fs = Fs + FsG#
      Fw = (uR*R + uT*T)*(1-f) + uB*B*(1-fB)#
#
      # intakes rates#
      irate_s = (taus*(Fs+FsG)/H) / (nus + (Fs+FsG)/H)#
      if(irate_s>((Fs+FsG)/H)) irate_s = (Fs+FsG)/H#
#
      irate_w = (tauw*Fw/H) / (nuw + Fw/H)#
      if(irate_w>(Fw/H)) irate_w = Fw/H#
#
      # summer gain, reproduction limitation#
      Gs = H* min(gamma, es* irate_s )#
#
      # winter gain#
      Gw = H* ew* irate_w#
#
      Us = Is *H # total summer ressource used#
      UsG = (FsG*Us)/(Fs+FsG) # grazed ressource#
      Uw = Iw *H#
      # impacts#
      if(R>0)#
      {#
        # R intake#
        Is = Gs/es#
        Us = phis * Is * (1 - FsG/Fs)#
        Uw = phiw * Gw/ew#
#
        PR = (Us+Uw)/(uR*R) - (FsG*Is)/(Fs*uG*V)#
        if(k==0) PT=0 else PT = PR*q/omega#
        if(k==1) PB=0 else PB = PR*(1-q)/(1-omega)#
        aHT = aT/(1+exp(r*(PT-hT)))#
        aHB = aB/(1+exp(r*(PB-hB)))#
        cH = c0/(1+exp(r*(PR-hR)))#
#
      }else {#
        aHT = aT#
        aHB = aB#
        cH = c0#
      }#
#
    }else {#
      aHT = a0#
      aHB = a0#
      cH = c0#
      Gs = Gw = 0#
    }#
#
    # vegetation model#
    dT= aHT*R*k - dT*T#
    dB= aHB*R*(1-k) -dB*B#
    dR= (T+B)*cH*V - (aHT*k + aHB*(1-k))*R#
#
    #herbivore model#
#
    dH =  Gs + Gw - m * H#
    return(list(c(dT, dS, dB, dH)))#
  })#
}
impact <- function(H, eq){#
#
R = eq["R"]#
T = eq["T"]#
B= eq["B"]#
production = (params["uR"]*R + params["uT"]*T)#
Fs = (params["uR"]*R + params["uT"]*T)*params["f"]#
Is = (params["taus"]*Fs/H) / (params["nus"] + Fs/H)#
Us = Is*H#
#
Fw = (params["uT"]*T*(1-params["f"]) + params["uB"]*B)#
Iw = (params["tauw"]*Rw/H) / (params["nuw"] + Fw/H) #
Uw = Iw*H#
chouilla = 0.0001#
wt = (eq["T"]+chouilla) / (eq["B"]+eq["T"]+2*chouilla)#
wb = (eq["B"]+chouilla) / (eq["B"]+eq["T"]+2*chouilla)#
Ot = params["omega"]*wt / (params["omega"]*wt + (1-params["omega"])*wb)#
Ob = (1-params["omega"])*wb / (params["omega"]*wt + (1-params["omega"])*wb)#
UsS = Us * params["uR"]*eq["R"] / (params["uR"]*eq["R"] + params["uT"]*eq["T"]*params["f"])#
#
PT = UsS*Ot/(params["uR"]*eq["R"]*wt) #
PB = UsS*Ob/(params["uR"]*eq["R"]*wb)#
PS = UsS/(params["uR"]*eq["R"])#
aT = params["a0"]/(1+exp(params["r"]*(PT-params["ptresh"])))#
aB = params["a0"]/(1+exp(params["r"]*(PB-params["ptresh"])))#
c.par = params["c0"]/(1+exp(params["r"]*(PS-params["ptresh"])))#
#
out = runsteady(func = modelH1, y =T0, parms = c(params,H=H), maxsteps = 10000)#
(eq = out$y)#
#
return(list(aT=aT, aB=aB, c=c.par, T = eq["T"], B = eq["B"]))#
}
plot.template(xlim = c(0,5), ylim = c(0,1), xticks = c(6,11), yticks = c(6,11), xlab = "Herbivore density (ind./km2)", ylab = "Vegetation proportions", col.bg = "white", col.grid = "grey")#
for (i in c("T", "B")) lines(imp[,i]~c(Hseq/375), col = colo()[i], type = "l", lwd = 1.5)#
legend(x = 1, y = 1, bg = "white", box.col=NA,  col = colo()[c("T", "B")], lwd = 2, legend = names(colo()[c("T", "B")]), ncol = 5, xjust = 0, yjust = 1)#
title("Impact of herbivory")
imp
Hseq = seq(0.01,5,le=100)*375#
T0 = c(T=.2, R = .2, B = .2)#
imp = matrix(NA, dimnames= list(1:100, c("T", "c", "B", "H", "aT", "aB")), nrow = 100, ncol=6)
for ( i in 1:100)#
{#
res = impact(Hseq[i], eq)#
imp[i,"aT"] = res$aT#
imp[i,"aB"] = res$aB#
imp[i,"c"] = res$c#
imp[i,"B"] = res$B#
imp[i,"T"] = res$T#
imp[i,"H"] = Hseq[i]#
}
source("script/plot_fct.r")
setwd("/Users/isabelleboulangeat/Documents/PROJETS/HIGH2/Theorique-STM-Herbivores/_scripts_model4states")
source("script/plot_fct.r")
source("scripts/plot_fct.r")
source("../scripts/plot_fct.r")
plot.template(xlim = c(0,5), ylim = c(0,1), xticks = c(6,11), yticks = c(6,11), xlab = "Herbivore density (ind./km2)", ylab = "Vegetation proportions", col.bg = "white", col.grid = "grey")#
for (i in c("T", "B")) lines(imp[,i]~c(Hseq/375), col = colo()[i], type = "l", lwd = 1.5)#
legend(x = 1, y = 1, bg = "white", box.col=NA,  col = colo()[c("T", "B")], lwd = 2, legend = names(colo()[c("T", "B")]), ncol = 5, xjust = 0, yjust = 1)#
title("Impact of herbivory")
imp
i
for ( i in 1:100)#
{#
res = impact(Hseq[i], eq)#
imp[i,"aT"] = res$aT#
imp[i,"aB"] = res$aB#
imp[i,"c"] = res$c#
imp[i,"B"] = res$B#
imp[i,"T"] = res$T#
imp[i,"H"] = Hseq[i]#
}
library(rootSolve)#
out = runsteady(func = modelV, y =T0, parms = c(params,H=H), maxsteps = 10000)#
(eq = out$y)
modelV <- function(ti, states, parms)#
{#
  with(as.list(c(states, parms)), {#
#
    V=1-T-R-B#
#
    # vegetation model#
    dT= aT*R*k - dT*T#
    dB= aB*R*(1-k) -dB*B#
    dR= (T+B)*c0*V - (aT*k + aB*(1-k))*R#
#
    return(list(c(dT, dR, dB)))#
  })#
}
library(rootSolve)#
out = runsteady(func = modelV, y =T0, parms = c(params,H=H), maxsteps = 10000)#
(eq = out$y)
Hseq = seq(0.01,5,le=100)*375#
T0 = c(T=.2, R = .2, B = .2)#
imp = matrix(NA, dimnames= list(1:100, c("T", "c", "B", "H", "aT", "aB")), nrow = 100, ncol=6)#
#
for ( i in 1:100)#
{#
res = impact(Hseq[i], eq)#
imp[i,"aT"] = res$aT#
imp[i,"aB"] = res$aB#
imp[i,"c"] = res$c#
imp[i,"B"] = res$B#
imp[i,"T"] = res$T#
imp[i,"H"] = Hseq[i]#
}
impact <- function(H, eq){#
#
R = eq["R"]#
T = eq["T"]#
B= eq["B"]#
production = (params["uR"]*R + params["uT"]*T)#
Fs = (params["uR"]*R + params["uT"]*T)*params["f"]#
Is = (params["taus"]*Fs/H) / (params["nus"] + Fs/H)#
Us = Is*H#
#
Fw = (params["uT"]*T*(1-params["f"]) + params["uB"]*B)#
Iw = (params["tauw"]*Fw/H) / (params["nuw"] + Fw/H) #
Uw = Iw*H#
chouilla = 0.0001#
wt = (eq["T"]+chouilla) / (eq["B"]+eq["T"]+2*chouilla)#
wb = (eq["B"]+chouilla) / (eq["B"]+eq["T"]+2*chouilla)#
Ot = params["omega"]*wt / (params["omega"]*wt + (1-params["omega"])*wb)#
Ob = (1-params["omega"])*wb / (params["omega"]*wt + (1-params["omega"])*wb)#
#
UsS = Us * params["uR"]*eq["R"] / (params["uR"]*eq["R"] + params["uT"]*eq["T"]*params["f"])#
#
PT = UsS*Ot/(params["uR"]*eq["R"]*wt)#
PB = UsS*Ob/(params["uR"]*eq["R"]*wb)#
PS = UsS/(params["uR"]*eq["R"])#
aT = params["a0"]/(1+exp(params["r"]*(PT-params["ptresh"])))#
aB = params["a0"]/(1+exp(params["r"]*(PB-params["ptresh"])))#
c.par = params["c0"]/(1+exp(params["r"]*(PS-params["ptresh"])))#
#
out = runsteady(func = modelH1, y =T0, parms = c(params,H=H), maxsteps = 10000)#
(eq = out$y)#
#
return(list(aT=aT, aB=aB, c=c.par, T = eq["T"], B = eq["B"]))#
}
Hseq = seq(0.01,5,le=100)*375#
T0 = c(T=.2, R = .2, B = .2)#
imp = matrix(NA, dimnames= list(1:100, c("T", "c", "B", "H", "aT", "aB")), nrow = 100, ncol=6)#
#
for ( i in 1:100)#
{#
res = impact(Hseq[i], eq)#
imp[i,"aT"] = res$aT#
imp[i,"aB"] = res$aB#
imp[i,"c"] = res$c#
imp[i,"B"] = res$B#
imp[i,"T"] = res$T#
imp[i,"H"] = Hseq[i]#
}
plot.template(xlim = c(0,5), ylim = c(0,1), xticks = c(6,11), yticks = c(6,11), xlab = "Herbivore density (ind./km2)", ylab = "Vegetation proportions", col.bg = "white", col.grid = "grey")#
for (i in c("T", "B")) lines(imp[,i]~c(Hseq/375), col = colo()[i], type = "l", lwd = 1.5)#
legend(x = 1, y = 1, bg = "white", box.col=NA,  col = colo()[c("T", "B")], lwd = 2, legend = names(colo()[c("T", "B")]), ncol = 5, xjust = 0, yjust = 1)#
title("Impact of herbivory")
T0 = c(T = 0.2, R = 0.3, B = 0.4, H=5*375)
out = runsteady(func = modelH, y =T0[4], parms = c(params,T = as.numeric(T0["T"]), S =as.numeric(T0["S"]), B=as.numeric(T0["B"])), maxsteps = 10000)
out = runsteady(func = modelH, y =T0[4], parms = c(params,T = as.numeric(T0["T"]), R =as.numeric(T0["R"]), B=as.numeric(T0["B"])), maxsteps = 10000)
out = runsteady(func = modelH, y =T0[4], parms = c(params,T = as.numeric(T0["T"]), R =as.numeric(T0["R"]), B=as.numeric(T0["B"])), maxsteps = 10000)
out$y/360
out = runsteady(func = modelV, y =T0[1:3], parms = c(params,H=as.numeric(T0["H"])), maxsteps = 10000)
Hseq = seq(0.01, 5, l =100)*375
T0 = c(T=.2, R = .2, B = .2)
Hseq = seq(0.01, 5, l =100)*375#
T0 = c(T=.2, R = .2, B = .2)#
vegEq = matrix(NA, dimnames= list(1:100, c("T", "R", "B", "H", "V")), nrow = 100, ncol=5)
for ( i in 1:100)#
{#
out = runsteady(func = modelV, y =T0, parms = c(params,H=Hseq[i]), maxsteps = 10000)#
(eq = out$y)#
vegEq[i,] = c(eq, Hseq[i], 1 - eq["R"] - eq["T"] - eq["B"])#
}
vegEq
T0 = c(T = 0.2, R = 0.3, B = 0.4, H=5*375)#
#
### single way interaction#
#
out = runsteady(func = modelH, y =T0[4], parms = c(params,T = as.numeric(T0["T"]), R =as.numeric(T0["R"]), B=as.numeric(T0["B"])), maxsteps = 10000)#
out$y/360#
#
out = runsteady(func = modelV, y =T0[1:3], parms = c(params,H=as.numeric(T0["H"])), maxsteps = 10000)#
out$y
out = solveEq(func = model, init =T0, parms = params, maxsteps = 10000)#
(eq = out$eq)#
plotEq(out)#
#
out = solveEq(func = model, init =eq, parms = params, maxsteps = 10000)#
plotEq(out)#
out$eq["H"]/350
solveEq <- function(func , init , parms , maxsteps, veget=F )#
{#
  nochange = 0#
  trace.mat = matrix(NA, ncol  = length(init), nrow = maxsteps+1 )#
  trace.mat[1,] = init#
  state = init#
  for (i in 1:maxsteps)#
  {#
    di = func(1, state, parms)#
    state = state + di[[1]]#
    if(state[4] <0) state[4]=0#
    trace.mat[i+1,] = state#
    if(!veget) {#
      if(sum(abs(trace.mat[i,]-trace.mat[i-1,]))<1e-10) nochange =nochange+1#
    }else{#
      if(sum(abs(trace.mat[i,-4]-trace.mat[i-1,-4]))<1e-10) nochange =nochange+1#
    }#
    if(nochange>=10) break;#
  }#
  trace.mat = trace.mat[1:i,]#
  return(list(eq = state, mat = trace.mat))#
}
out = solveEq(func = model, init =T0, parms = params, maxsteps = 10000)#
(eq = out$eq)#
plotEq(out)#
#
out = solveEq(func = model, init =eq, parms = params, maxsteps = 10000)#
plotEq(out)#
out$eq["H"]/350
setwd("/Users/isabelleboulangeat/Documents/PROJETS/HIGH2/Theorique-STM-Herbivores/_scripts_model4states")
params =  c(#
aT = 0.05,#
aB = 0.05,#
dT = 0.004,#
dB = 0.05,#
c0 = 0.5,#
k = .6#
)
with(as.list(params),#
{#
equi_veget(alpha=a0, c = c0, k = k, deltaB = dB, deltaT = dT)#
})
equi_veget <- function(alpha, c, k, deltaB, deltaT)#
{#
  Tstar = alpha*deltaB*k*(c*deltaB*k - c*deltaT*k + c*deltaT - deltaB*deltaT)/(c*(deltaB*k - deltaT*k + deltaT)*(alpha*deltaB*k - alpha*deltaT*k + alpha*deltaT + deltaB*deltaT))#
  Bstar = -alpha*deltaT*(k - 1)*(c*deltaB*k - c*deltaT*k + c*deltaT - deltaB*deltaT)/(c*(deltaB*k - deltaT*k + deltaT)*(alpha*deltaB*k - alpha*deltaT*k + alpha*deltaT + deltaB*deltaT))#
  Sstar = deltaB*deltaT*(c*deltaB*k - c*deltaT*k + c*deltaT - deltaB*deltaT)/(c*(deltaB*k - deltaT*k + deltaT)*(alpha*deltaB*k - alpha*deltaT*k + alpha*deltaT + deltaB*deltaT))#
  eq = c(T = Tstar, R=Sstar, B=Bstar)#
  return(eq)#
}
with(as.list(params),#
{#
equi_veget(alpha=a0, c = c0, k = k, deltaB = dB, deltaT = dT)#
})
ource("model_fct.r")#
source("analysis_fct.r")#
params =  c(#
a0 = 0.05,#
dT = 0.004,#
dB = 0.05,#
c0 = 0.5,#
k = .6#
)
with(as.list(params),#
{#
equi_veget(alpha=a0, c = c0, k = k, deltaB = dB, deltaT = dT)#
})
library(lhs)#
lhs = randomLHS(10000,5)#
parDesign=data.frame(lhs)#
parDesign$a0 <- qnorm(lhs[,1], mean=.05, sd=0.01)#
parDesign$c0 <- qnorm(lhs[,2], mean=.5, sd=0.1)#
parDesign$dT <- 1/(qnorm(lhs[,3], mean=250, sd=50))
install.packages(lhs)
install.packages("lhs")
22
library(lhs)#
lhs = randomLHS(10000,5)#
parDesign=data.frame(lhs)#
parDesign$a0 <- qnorm(lhs[,1], mean=.05, sd=0.01)#
parDesign$c0 <- qnorm(lhs[,2], mean=.5, sd=0.1)#
parDesign$dT <- 1/(qnorm(lhs[,3], mean=250, sd=50))#
parDesign$dB = 1/(qnorm(lhs[,4], mean=250, sd=50))#
parDesign$dTdB  = parDesign$dT/parDesign$dB#
parDesign$k <- qnorm(lhs[,5], mean=.5, sd=0.1)#
#
parLHS.pars = parDesign[, which(colnames(parDesign)%in%names(params))]#
nrow(parLHS.pars)#
nrow(unique(parLHS.pars))#
summary(parLHS.pars)
eq.veg.SA = matrix(NA, dimnames= list(1:nrow(parLHS.pars), c("T", "S", "B")), ncol =3, nrow = nrow(parLHS.pars) )#
#
for(i in 1:nrow(parLHS.pars))#
{#
	if(i%%1000==0) print(i)#
res = with(as.list(parLHS.pars[i,]),#
{#
equi_veget(alpha=a0, c = c0, k = k, deltaB = dB, deltaT = dT)#
})#
eq.veg.SA[i,] = res#
}#
#
head(eq.veg.SA)
colo = c(T = rgb(107, 161, 47, 100, maxColorValue = 255), S= rgb(237, 203, 69, 100, maxColorValue = 255) , G= rgb(247, 107, 37, 100, maxColorValue = 255), H = rgb(100, 100, 100, 100, maxColorValue = 255), B = rgb(59, 79, 240, 100, maxColorValue = 255))#
boxpl = function(x, colo) {boxplot(x, notch = TRUE, staplewex = 0, outline = F, col = colo)}
boxpl(eq.veg.SA, colo = colo[c("T","S","B")])
forest = eq.veg.SA[,"T"]+eq.veg.SA[,"B"]
mod = lm(forest~., data = parDesign[,c("a0","c0","k","dT","dB","dTdB")])
summary(mod)
open = 1-apply(eq.veg.SA, 1, sum)
mod = lm(open~., data = parLHS.pars)
summary(mod)
dominance = c("T","B","O")[apply(cbind(eq.veg.SA[,-2], 1-forest),1, which.max)]
dominance = c("T","B","O")[apply(cbind(eq.veg.SA[,-2], 1-forest),1, which.max)]
table(dominance)
library(randomForest)
install.packages("randomForest")
library(randomForest)
mod = randomForest(as.factor(dominance)~., data = parDesign[,c("a0","c0","k","dT","dB","dTdB")])
importance(mod)
par(cex = 2)#
varImpPlot(mod, main = "",#
	labels = c("c","a",expression(d[T]),expression(d[B]),expression(d[T]/d[B]), "k"))#
title("(a)", font = 2)
library(randomForest)#
mod1 = randomForest(as.factor(dominance)~., data = parDesign[,c("a0","c0","k","dT","dB","dTdB")])#
importance(mod1)#
#
mod2 = randomForest(open~., data = parDesign[,c("a0","c0","k","dT","dB","dTdB")])#
importance(mod2)
par(cex = 2)#
varImpPlot(mod, main = "",#
	labels = c("a","k",expression(d[T]/d[B]),expression(d[T]),expression(d[B]),"c"))#
title("(b)", font = 2)
plot.template(xlim = c(0,5), ylim = c(0,1), xticks = c(6,11), yticks = c(6,11), xlab = "Herbivore density (ind./km2)", ylab = "Vegetation proportions", col.bg = "white", col.grid = "grey")#
for (i in c("T", "B")) lines(imp[,i]~c(Hseq/375), col = colo()[i], type = "l", lwd = 1.5)#
legend(x = 1, y = 1, bg = "white", box.col=NA,  col = colo()[c("T", "B")], lwd = 2, legend = names(colo()[c("T", "B")]), ncol = 5, xjust = 0, yjust = 1)#
title("Impact of herbivory")
colo <-function(alpha = 255){#
  co = c(T = rgb(254, 127, 0, alpha, maxColorValue = 255), G= rgb(12, 12, 12, alpha, maxColorValue = 255) , S= rgb(32, 201, 69, alpha, maxColorValue = 255), H = rgb(0, 0, 0, alpha, maxColorValue = 255), B = rgb(38, 140, 248, alpha, maxColorValue = 255))#
  return(co)#
}
plot.template(xlim = c(0,5), ylim = c(0,1), xticks = c(6,11), yticks = c(6,11), xlab = "Herbivore density (ind./km2)", ylab = "Vegetation proportions", col.bg = "white", col.grid = "grey")#
for (i in c("T", "B")) lines(imp[,i]~c(Hseq/375), col = colo()[i], type = "l", lwd = 1.5)#
legend(x = 1, y = 1, bg = "white", box.col=NA,  col = colo()[c("T", "B")], lwd = 2, legend = names(colo()[c("T", "B")]), ncol = 5, xjust = 0, yjust = 1)#
title("Impact of herbivory")
H = 10#
S = seq(0,1, length.out = 100)#
G = seq(0,1, length.out = 100)#
R1 = S/H#
R2 = G/H#
alpha = 1#
u1 = 200#
u2 = 500#
h1 = 1/7#
h2 = 1/5#
r = 5#
phi = 0.2#
p = 4#
#
I1 = (alpha*u1*R1)/(1 + alpha*h1*u1*R1)#
#I2coeff = (phi+ (1-phi)/(1+exp(r*(I1-p))))#
#
S = 0.5#
uS = 2000000#
H = seq(0.5,15,by=.1)*37500#
R1 = uS*S/H#
h1 = 1/12#
I1 = (alpha*R1)/(1 + alpha*h1*R1) #
#
pressure = c(0,(I1*H)/(uS*S),1)#
#impact =  1/2*(cos(pi*pressure)+1) #
h = 0.5#
impact =  1/(1+exp(5*(pressure-h)))#
#
par(mfrow = c(1,2))#
plot(impact~pressure, type = "l", xlab = "Browser impact on S", ylab = "impact multiplicative factor", xlim = c(0,1), ylim = c(0,1))#
abline(v = h, lty=2)#
abline(h=0.5, lty = 3)#
text(h+0.05, 1,"h", cex=.8)#
plot(impact~c(0,H,Inf), type = "l", xlab = "Browser density", ylab = "impact multiplicative factor", ylim = c(0,1), xaxt = "n")#
axis(1, at = seq(0.5,15,l=6)*37500, labels = seq(0.5,15,l=6))
